import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";import{o as k,c as h,a,w as t,b as n,d as s,e as p,r as o}from"./app.d7fcbd41.js";const m={},g=n("p",null,"Official JavaScript SDK to connect to the MyParcel API via Node.js or browser.",-1),_=n("h2",{id:"installation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#installation","aria-hidden":"true",tabindex:"-1"},"#"),s(" Installation")],-1),y=n("p",null,"Install [@myparcel/sdk] with your package manager:",-1),b=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"yarn"),s(),n("span",{class:"token function"},"add"),s(` @myparcel/sdk
`)])])],-1),f=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"pnpm"),s(),n("span",{class:"token function"},"add"),s(` @myparcel/sdk
`)])])],-1),v=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),s(),n("span",{class:"token function"},"install"),s(` @myparcel/sdk
`)])])],-1),w=p(`<h2 id="usage-examples" tabindex="-1"><a class="header-anchor" href="#usage-examples" aria-hidden="true" tabindex="-1">#</a> Usage examples</h2><h3 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage" aria-hidden="true" tabindex="-1">#</a> Basic usage</h3><p>The client is Promise-based, so you can use <code>async/await</code>, or <code>Promise.then</code>.</p><p>First, instantiate an SDK and pass the endpoints you want to use.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createPrivateSdk<span class="token punctuation">,</span> PostShipments <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@myparcel/sdk&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> clientConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token string">&#39;bearer &#39;</span> <span class="token operator">+</span> <span class="token constant">MY_BASE_64_ENCODED_API_KEY</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sdk <span class="token operator">=</span> <span class="token function">createPrivateSdk</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FetchClient</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">PostShipments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div>`,5),x=s("Then call the endpoint. There are constants available in our SDK for data like carriers, package types, delivery types and more. See "),S=s("constants"),E=p(`<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> sdk<span class="token punctuation">.</span><span class="token function">postShipments</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">carrier</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">package_type</span><span class="token operator">:</span> <span class="token string">&#39;package&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">recipient</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">cc</span><span class="token operator">:</span> <span class="token string">&#39;NL&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;Hoofddorp&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">person</span><span class="token operator">:</span> <span class="token string">&#39;Ms. Parcel&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">street</span><span class="token operator">:</span> <span class="token string">&#39;Antareslaan 31&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 123456 ] (The ID of the shipment that was just created)</span>
</code></pre></div><h3 id="using-constants" tabindex="-1"><a class="header-anchor" href="#using-constants" aria-hidden="true" tabindex="-1">#</a> Using constants</h3><p>Our SDK exposes some constants to make working with our API easier.</p><ul><li>Carriers<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CARRIERS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@myparcelnl/sdk&#39;</span><span class="token punctuation">;</span>

<span class="token constant">CARRIERS</span><span class="token punctuation">.</span><span class="token constant">POSTNL_NAME</span> <span class="token comment">// &quot;postnl&quot;</span>
</code></pre></div></li><li><strong>Package types:</strong> Contains all package types&#39; names and IDs.<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">PACKAGE_TYPES</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@myparcelnl/sdk&#39;</span><span class="token punctuation">;</span>

<span class="token constant">PACKAGE_TYPES</span><span class="token punctuation">.</span><span class="token constant">DIGITAL_STAMP_NAME</span> <span class="token comment">// &quot;digital_stamp&quot;</span>
<span class="token constant">PACKAGE_TYPES</span><span class="token punctuation">.</span><span class="token constant">PACKAGE_ID</span> <span class="token comment">// 1</span>
<span class="token constant">PACKAGE_TYPES</span><span class="token punctuation">.</span><span class="token constant">LETTER</span> <span class="token comment">// { ID: 3, NAME: &quot;letter&quot; }</span>
<span class="token comment">// etc</span>
</code></pre></div></li><li><strong>Delivery types</strong><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">DELIVERY_TYPES</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@myparcelnl/sdk&#39;</span><span class="token punctuation">;</span>

<span class="token constant">DELIVERY_TYPES</span><span class="token punctuation">.</span><span class="token constant">STANDARD_NAME</span> <span class="token comment">// &quot;standard&quot;</span>
<span class="token constant">DELIVERY_TYPES</span><span class="token punctuation">.</span><span class="token constant">PICKUP_ID</span> <span class="token comment">// 4</span>
<span class="token constant">DELIVERY_TYPES</span><span class="token punctuation">.</span><span class="token constant">MORNING</span> <span class="token comment">// { ID: 1, NAME: &quot;morning&quot; }</span>
<span class="token comment">// etc</span>
</code></pre></div></li><li><strong>Countries:</strong> Contains constants for all countries, by name.<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">COUNTRIES</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@myparcelnl/sdk&#39;</span><span class="token punctuation">;</span>

<span class="token constant">COUNTRIES</span><span class="token punctuation">.</span><span class="token constant">NETHERLANDS</span> <span class="token comment">// &quot;NL&quot;</span>
<span class="token constant">COUNTRIES</span><span class="token punctuation">.</span><span class="token constant">GERMANY</span> <span class="token comment">// &quot;DE&quot;</span>
<span class="token comment">// etc</span>
</code></pre></div></li></ul><h3 id="creating-a-new-endpoint" tabindex="-1"><a class="header-anchor" href="#creating-a-new-endpoint" aria-hidden="true" tabindex="-1">#</a> Creating a new endpoint</h3><p>To create a new endpoint, you can extend either <code>AbstractPrivateEndpoint</code> or <code>AbstractPublicEndpoint</code> and fill in the derived class as needed.</p>`,6),P=s("Feel free to add open a pull request to add it to our repository! See "),C=s("contributing"),A=s("."),j=p(`<h3 id="creating-a-new-client" tabindex="-1"><a class="header-anchor" href="#creating-a-new-client" aria-hidden="true" tabindex="-1">#</a> Creating a new client</h3><p>In this example we&#39;re creating an Axios client.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">AxiosClient</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClient</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">endpoint<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> endpoint<span class="token punctuation">.</span>method<span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createUrl</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token operator">...</span>endpoint<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> e<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Now use the new client with an SDK instance:</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> sdk <span class="token operator">=</span> <span class="token function">createPublicSdk</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AxiosClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">GetCarriers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> carriers <span class="token operator">=</span> <span class="token keyword">await</span> sdk<span class="token punctuation">.</span><span class="token function">getCarriers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>carriers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ { &quot;id&quot;: 1, &quot;name&quot;: &quot;postnl&quot;, (etc...)</span>
</code></pre></div><h2 id="endpoints" tabindex="-1"><a class="header-anchor" href="#endpoints" aria-hidden="true" tabindex="-1">#</a> Endpoints</h2><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public" aria-hidden="true" tabindex="-1">#</a> Public</h3><p>Public endpoints do not require authorization and are safe to use in a browser.</p>`,8),q=s("Delivery options "),I=s("GetDeliveryOptions"),G=s("Pickup locations "),N=s("GetPickupLocations"),D=s("Carriers "),T=s("GetCarriers"),R=s("GetCarrier"),Y=n("h3",{id:"private",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#private","aria-hidden":"true",tabindex:"-1"},"#"),s(" Private")],-1),L=n("p",null,"Private endpoints require an Authorization header. This should be a base64 encoded MyParcel API key. You can create one in the shop settings in our [backoffice]. See [Authorization] in the API documentation for more information.",-1),M=s("Shipments "),K=s("GetShipment"),O=s("GetShipments"),V=s("PostShipments"),U=n("h2",{id:"contributing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#contributing","aria-hidden":"true",tabindex:"-1"},"#"),s(" Contributing")],-1),B=n("h3",{id:"requirements",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#requirements","aria-hidden":"true",tabindex:"-1"},"#"),s(" Requirements")],-1),H=s("Node 16"),z=s("Yarn"),F=p(`<h3 id="basics" tabindex="-1"><a class="header-anchor" href="#basics" aria-hidden="true" tabindex="-1">#</a> Basics</h3><ul><li>Fork this repository and clone it to your machine</li><li>Install dependencies using Yarn:<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">yarn</span>
</code></pre></div></li></ul><h3 id="make-your-changes" tabindex="-1"><a class="header-anchor" href="#make-your-changes" aria-hidden="true" tabindex="-1">#</a> Make your changes</h3><ul><li>Try to conform to our code style. Make sure to enable ESLint in your editor.</li><li>You should make only one change in each branch.</li></ul><h3 id="add-or-update-tests" tabindex="-1"><a class="header-anchor" href="#add-or-update-tests" aria-hidden="true" tabindex="-1">#</a> Add or update tests</h3><p>Run tests with the following command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">yarn</span> run test:coverage
</code></pre></div><ul><li>Coverage % needs to be equal to or greater than that of the previous commit.</li><li>If you added a new file, the corresponding test(s) should go inside <code>&lt;filename&gt;.spec.ts</code> in the same directory.</li></ul><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit" aria-hidden="true" tabindex="-1">#</a> Commit</h3>`,9),W=s("Make as many commits as you'd like. We use "),J=s("Conventional Commits"),Q=s(" and "),X=s("semantic-release"),Z=s(" to simplify the process of releasing updates by automating release notes and changelogs based on the rules of "),$=s("@commitlint/config-conventional"),nn=s("."),sn=n("p",null,"Your branch will be squashed into one single valid commit before merging.",-1),an=n("h3",{id:"create-a-pull-request",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-a-pull-request","aria-hidden":"true",tabindex:"-1"},"#"),s(" Create a pull request")],-1),tn=n("ul",null,[n("li",null,"Keep your pull requests focused on single subjects"),n("li",null,"Please explain what you changed and why"),n("li",null,"We will review your code and thoroughly test it before squashing and merging your pull request")],-1);function en(on,pn){const i=o("NpmShield"),l=o("GitHubShield"),r=o("Stack"),c=o("CodeGroupItem"),u=o("CodeGroup"),e=o("AutoLink");return k(),h("div",null,[a(r,{class:"grid-flow-col auto-cols-max gap-1"},{default:t(()=>[a(i,{package:"@myparcel/sdk"}),a(l,{repo:"myparcelnl/js-sdk",link:"issues"}),a(l,{repo:"myparcelnl/js-sdk",link:"pulls"})]),_:1}),g,_,y,a(u,{id:"npm"},{default:t(()=>[a(c,{title:"yarn"},{default:t(()=>[b]),_:1}),a(c,{title:"pnpm"},{default:t(()=>[f]),_:1}),a(c,{title:"npm"},{default:t(()=>[v]),_:1})]),_:1}),w,n("p",null,[x,a(e,{item:"#using-constants"},{default:t(()=>[S]),_:1})]),E,n("p",null,[P,a(e,{item:"#contributing"},{default:t(()=>[C]),_:1}),A]),j,n("ul",null,[n("li",null,[q,n("ul",null,[n("li",null,[a(e,{item:"https://github.com/myparcelnl/js-sdk/blob/main/src/endpoints/public/delivery-options/GetDeliveryOptions.ts"},{default:t(()=>[I]),_:1})])])]),n("li",null,[G,n("ul",null,[n("li",null,[a(e,{item:"https://github.com/myparcelnl/js-sdk/blob/main/src/endpoints/public/pickup-locations/GetPickupLocations.ts"},{default:t(()=>[N]),_:1})])])]),n("li",null,[D,n("ul",null,[n("li",null,[a(e,{item:"https://github.com/myparcelnl/js-sdk/blob/main/src/endpoints/public/carriers/GetCarriers.ts"},{default:t(()=>[T]),_:1})]),n("li",null,[a(e,{item:"https://github.com/myparcelnl/js-sdk/blob/main/src/endpoints/public/carriers/GetCarrier.ts"},{default:t(()=>[R]),_:1})])])])]),Y,L,n("ul",null,[n("li",null,[M,n("ul",null,[n("li",null,[a(e,{item:"https://github.com/myparcelnl/js-sdk/blob/main/src/endpoints/private/shipments/GetShipment.ts"},{default:t(()=>[K]),_:1})]),n("li",null,[a(e,{item:"https://github.com/myparcelnl/js-sdk/blob/main/src/endpoints/private/shipments/GetShipments.ts"},{default:t(()=>[O]),_:1})]),n("li",null,[a(e,{item:"https://github.com/myparcelnl/js-sdk/blob/main/src/endpoints/private/shipments/PostShipments.ts"},{default:t(()=>[V]),_:1})])])])]),U,B,n("ul",null,[n("li",null,[a(e,{item:"https://nodejs.org/"},{default:t(()=>[H]),_:1})]),n("li",null,[a(e,{item:"https://classic.yarnpkg.com/"},{default:t(()=>[z]),_:1})])]),F,n("p",null,[W,a(e,{item:"https://www.conventionalcommits.org/en/v1.0.0/#summary"},{default:t(()=>[J]),_:1}),Q,a(e,{item:"https://github.com/semantic-release/semantic-release"},{default:t(()=>[X]),_:1}),Z,a(e,{item:"https://github.com/conventional-changelog/commitlint"},{default:t(()=>[$]),_:1}),nn]),sn,an,tn])}var rn=d(m,[["render",en],["__file","51.javascript-sdk.html.vue"]]);export{rn as default};
