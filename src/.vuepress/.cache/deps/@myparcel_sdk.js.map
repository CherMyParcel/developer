{
  "version": 3,
  "sources": ["dep:@myparcel_sdk", "../../../../node_modules/@myparcel/sdk/dist/index.mjs"],
  "sourcesContent": ["\nexport * from \"../../../../node_modules/@myparcel/sdk/dist/index.mjs\"", "// @myparcel/sdk@1.1.1 2022-05-11T13:20:37.379Z\nclass ApiException extends Error {\n  data;\n  constructor(error) {\n    super(error.message);\n    Object.setPrototypeOf(this, ApiException.prototype);\n    this.name = \"ApiException\";\n    this.data = error;\n  }\n}\n\nclass UserException extends Error {\n  name = \"user\";\n  constructor(message) {\n    super(message);\n    Object.setPrototypeOf(this, UserException.prototype);\n    this.name = \"UserException\";\n  }\n}\n\nconst addParameters = (path, parameters) => {\n  if (parameters) {\n    const parameterSets = Object.entries(parameters).map(([key, value]) => `${key}=${value}`);\n    if (parameterSets.length) {\n      path += `?${parameterSets.join(\"&\")}`;\n    }\n  }\n  return path;\n};\n\nfunction isOfType(value, property) {\n  return value && value[property] !== void 0;\n}\n\nconst BASE_URL = \"https://api.myparcel.nl\";\nclass AbstractClient {\n  baseUrl;\n  headers;\n  _requiredHeaders = [];\n  constructor(config) {\n    this.baseUrl = config?.baseUrl ?? BASE_URL;\n    this.headers = config?.headers ?? {};\n  }\n  get requiredHeaders() {\n    return this._requiredHeaders;\n  }\n  set requiredHeaders(value) {\n    this._requiredHeaders = value;\n  }\n  async doRequest(endpoint, options) {\n    options = AbstractClient.normalizeOptions(options);\n    this.validateHeaders(endpoint, options);\n    const response = await this.request(endpoint, options);\n    if (isOfType(response, \"errors\")) {\n      throw new ApiException(response);\n    }\n    return response.data[endpoint.getProperty()];\n  }\n  getHeaders() {\n    return {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      ...this.headers\n    };\n  }\n  createUrl(endpoint, options) {\n    let urlPath = endpoint.getPath();\n    if (options?.path) {\n      urlPath = this.substitutePath(urlPath, options.path);\n    }\n    if (urlPath.includes(\"/:\")) {\n      throw new UserException(`One or more path variables are missing in ${urlPath}`);\n    }\n    if (options?.parameters) {\n      urlPath = addParameters(urlPath, options.parameters);\n    }\n    return `${this.baseUrl}/${urlPath}`;\n  }\n  substitutePath(urlPath, pathVariables) {\n    if (pathVariables) {\n      Object.entries(pathVariables).forEach(([key, value]) => {\n        urlPath = urlPath.replace(`:${key}`, String(value));\n      });\n    }\n    return urlPath;\n  }\n  validateHeaders(endpoint, options) {\n    const missingHeaders = this.requiredHeaders.filter((header) => !(header.toLowerCase() in (options?.headers ?? [])));\n    if (missingHeaders.length) {\n      throw new UserException(`Required headers are missing: ${missingHeaders.join(\", \")}`);\n    }\n  }\n  static normalizeOptions(options) {\n    if (options.headers) {\n      options.headers = Object.entries(options.headers).reduce((acc, [key, header]) => ({\n        ...acc,\n        [key.toLowerCase()]: header\n      }), {});\n    }\n    if (options.parameters) {\n      options.parameters = Object.entries(options.parameters).reduce((acc, [key, parameter]) => ({\n        ...acc,\n        [key.toLowerCase()]: parameter.toString()\n      }), {});\n    }\n    return options;\n  }\n}\n\nclass FetchClient extends AbstractClient {\n  request = async (endpoint, options) => {\n    const config = {\n      method: endpoint.method,\n      headers: {\n        ...this.getHeaders(),\n        ...endpoint.getHeaders()\n      }\n    };\n    if (isOfType(options, \"body\")) {\n      config.body = JSON.stringify(options.body);\n    }\n    const request = await fetch(this.createUrl(endpoint, options), config);\n    return request.json();\n  };\n}\n\nclass AbstractEndpoint {\n  getHeaders() {\n    return {};\n  }\n  getPath() {\n    return this.path;\n  }\n  getProperty() {\n    return this.property;\n  }\n}\n\nclass AbstractPublicEndpoint extends AbstractEndpoint {\n}\n\nclass AbstractPrivateEndpoint extends AbstractEndpoint {\n}\n\nfunction createMyParcelSdk(client, endpoints) {\n  if (!endpoints.length) {\n    throw new UserException(\"At least one endpoint must be passed.\");\n  }\n  return endpoints.reduce((acc, endpoint) => ({\n    ...acc,\n    [endpoint.name]: async (options) => {\n      return client.doRequest(endpoint, options ?? {});\n    }\n  }), {});\n}\n\nconst createPrivateSdk = (client, endpoints) => {\n  client.requiredHeaders = [\"Authorization\"];\n  return createMyParcelSdk(client, endpoints);\n};\n\nconst createPublicSdk = (client, endpoints) => createMyParcelSdk(client, endpoints);\n\nconst POST_NL_ID = 1;\nconst POST_NL_NAME = \"postnl\";\nconst POST_NL_HUMAN = \"PostNL\";\nconst BPOST_ID = 2;\nconst BPOST_NAME = \"bpost\";\nconst BPOST_HUMAN = \"bpost\";\nconst CHEAP_CARGO_ID = 3;\nconst CHEAP_CARGO_NAME = \"cheapcargo\";\nconst CHEAP_CARGO_HUMAN = \"Cheap Cargo\";\nconst DPD_ID = 4;\nconst DPD_NAME = \"dpd\";\nconst DPD_HUMAN = \"DPD\";\nconst INSTABOX_ID = 5;\nconst INSTABOX_NAME = \"instabox\";\nconst INSTABOX_HUMAN = \"Instabox\";\nconst DHL_ID = 6;\nconst DHL_NAME = \"dhl\";\nconst DHL_HUMAN = \"DHL\";\nconst BOL_COM_ID = 7;\nconst BOL_COM_NAME = \"bol.com\";\nconst BOL_COM_HUMAN = \"Bol.com\";\nconst UPS_ID = 8;\nconst UPS_NAME = \"ups\";\nconst UPS_HUMAN = \"UPS\";\nconst POSTNL = {\n  NAME: POST_NL_NAME,\n  ID: POST_NL_ID,\n  HUMAN: POST_NL_HUMAN\n};\nconst BPOST = {\n  NAME: BPOST_NAME,\n  ID: BPOST_ID,\n  HUMAN: BPOST_HUMAN\n};\nconst CHEAP_CARGO = {\n  NAME: CHEAP_CARGO_NAME,\n  ID: CHEAP_CARGO_ID,\n  HUMAN: CHEAP_CARGO_HUMAN\n};\nconst DPD = {\n  NAME: DPD_NAME,\n  ID: DPD_ID,\n  HUMAN: DPD_HUMAN\n};\nconst INSTABOX = {\n  NAME: INSTABOX_NAME,\n  ID: INSTABOX_ID,\n  HUMAN: INSTABOX_HUMAN\n};\nconst DHL = {\n  NAME: DHL_NAME,\n  ID: DHL_ID,\n  HUMAN: DHL_HUMAN\n};\nconst BOL_COM = {\n  NAME: BOL_COM_NAME,\n  ID: BOL_COM_ID,\n  HUMAN: BOL_COM_HUMAN\n};\nconst UPS = {\n  NAME: UPS_NAME,\n  ID: UPS_ID,\n  HUMAN: UPS_HUMAN\n};\nconst ALL$3 = [CHEAP_CARGO, DPD, INSTABOX, DHL, BOL_COM, UPS];\n\nvar carriers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  POST_NL_ID: POST_NL_ID,\n  POST_NL_NAME: POST_NL_NAME,\n  POST_NL_HUMAN: POST_NL_HUMAN,\n  BPOST_ID: BPOST_ID,\n  BPOST_NAME: BPOST_NAME,\n  BPOST_HUMAN: BPOST_HUMAN,\n  CHEAP_CARGO_ID: CHEAP_CARGO_ID,\n  CHEAP_CARGO_NAME: CHEAP_CARGO_NAME,\n  CHEAP_CARGO_HUMAN: CHEAP_CARGO_HUMAN,\n  DPD_ID: DPD_ID,\n  DPD_NAME: DPD_NAME,\n  DPD_HUMAN: DPD_HUMAN,\n  INSTABOX_ID: INSTABOX_ID,\n  INSTABOX_NAME: INSTABOX_NAME,\n  INSTABOX_HUMAN: INSTABOX_HUMAN,\n  DHL_ID: DHL_ID,\n  DHL_NAME: DHL_NAME,\n  DHL_HUMAN: DHL_HUMAN,\n  BOL_COM_ID: BOL_COM_ID,\n  BOL_COM_NAME: BOL_COM_NAME,\n  BOL_COM_HUMAN: BOL_COM_HUMAN,\n  UPS_ID: UPS_ID,\n  UPS_NAME: UPS_NAME,\n  UPS_HUMAN: UPS_HUMAN,\n  POSTNL: POSTNL,\n  BPOST: BPOST,\n  CHEAP_CARGO: CHEAP_CARGO,\n  DPD: DPD,\n  INSTABOX: INSTABOX,\n  DHL: DHL,\n  BOL_COM: BOL_COM,\n  UPS: UPS,\n  ALL: ALL$3\n});\n\nconst AFGHANISTAN = \"AF\";\nconst ALAND_ISLANDS = \"AX\";\nconst ALBANIA = \"AL\";\nconst ALGERIA = \"DZ\";\nconst AMERICAN_SAMOA = \"AS\";\nconst AMERICAN_VIRGIN_ISLANDS = \"VI\";\nconst ANDORRA = \"AD\";\nconst ANGOLA = \"AO\";\nconst ANGUILLA = \"AI\";\nconst ANTARCTICA = \"AQ\";\nconst ANTIGUA_AND_BARBUDA = \"AG\";\nconst ARGENTINA = \"AR\";\nconst ARMENIA = \"AM\";\nconst ARUBA = \"AW\";\nconst AUSTRALIA = \"AU\";\nconst AUSTRIA = \"AT\";\nconst AZERBAIJAN = \"AZ\";\nconst BAHAMAS = \"BS\";\nconst BAHRAIN = \"BH\";\nconst BANGLADESH = \"BD\";\nconst BARBADOS = \"BB\";\nconst BELARUS = \"BY\";\nconst BELGIUM = \"BE\";\nconst BELIZE = \"BZ\";\nconst BENIN = \"BJ\";\nconst BERMUDA = \"BM\";\nconst BHUTAN = \"BT\";\nconst BOLIVIA = \"BO\";\nconst BOSNIA_AND_HERZEGOVINA = \"BA\";\nconst BOTSWANA = \"BW\";\nconst BOUVET_ISLAND = \"BV\";\nconst BRAZIL = \"BR\";\nconst BRITISH_INDIAN_OCEAN_TERRITORY = \"IO\";\nconst BRITISH_VIRGIN_ISLANDS = \"VG\";\nconst BRUNEI_DARUSSALAM = \"BN\";\nconst BULGARIA = \"BG\";\nconst BURKINA_FASO = \"BF\";\nconst BURUNDI = \"BI\";\nconst CABO_VERDE = \"CV\";\nconst CAMBODIA = \"KH\";\nconst CAMEROON = \"CM\";\nconst CANADA = \"CA\";\nconst CAYMAN_ISLANDS = \"KY\";\nconst CENTRAL_AFRICAN_REPUBLIC = \"CF\";\nconst CHAD = \"TD\";\nconst CHILE = \"CL\";\nconst CHINA = \"CN\";\nconst CHRISTMAS_ISLAND = \"CX\";\nconst COCOS_ISLANDS = \"CC\";\nconst COLOMBIA = \"CO\";\nconst COMOROS = \"KM\";\nconst CONGO_BRAZZAVILLE = \"CG\";\nconst CONGO_KINSHASA = \"CD\";\nconst COOK_ISLANDS = \"CK\";\nconst COSTA_RICA = \"CR\";\nconst CROATIA = \"HR\";\nconst CUBA = \"CU\";\nconst CURACAO = \"CW\";\nconst CYPRUS = \"CY\";\nconst CZECH_REPUBLIC = \"CZ\";\nconst COTE_D_IVOIRE = \"CI\";\nconst DENMARK = \"DK\";\nconst DJIBOUTI = \"DJ\";\nconst DOMINICA = \"DM\";\nconst DOMINICAN_REPUBLIC = \"DO\";\nconst DUTCH_ANTILLES = \"BQ\";\nconst ECUADOR = \"EC\";\nconst EGYPT = \"EG\";\nconst EL_SALVADOR = \"SV\";\nconst EQUATORIAL_GUINEA = \"GQ\";\nconst ERITREA = \"ER\";\nconst ESTONIA = \"EE\";\nconst ESWATINI = \"SZ\";\nconst ETHIOPIA = \"ET\";\nconst FALKLAND_ISLANDS = \"FK\";\nconst FAROE_ISLANDS = \"FO\";\nconst FIJI = \"FJ\";\nconst FINLAND = \"FI\";\nconst FRANCE = \"FR\";\nconst FRENCH_GUIANA = \"GF\";\nconst FRENCH_POLYNESIA = \"PF\";\nconst FRENCH_SOUTHERN_TERRITORIES = \"TF\";\nconst GABON = \"GA\";\nconst GAMBIA = \"GM\";\nconst GEORGIA = \"GE\";\nconst GERMANY = \"DE\";\nconst GHANA = \"GH\";\nconst GIBRALTAR = \"GI\";\nconst GREECE = \"GR\";\nconst GREENLAND = \"GL\";\nconst GRENADA = \"GD\";\nconst GUADELOUPE = \"GP\";\nconst GUAM = \"GU\";\nconst GUATEMALA = \"GT\";\nconst GUERNSEY = \"GG\";\nconst GUINEA = \"GN\";\nconst GUINEA_BISSAU = \"GW\";\nconst GUYANA = \"GY\";\nconst HAITI = \"HT\";\nconst HEARD_ISLAND_AND_MCDONALD_ISLANDS = \"HM\";\nconst HOLY_SEE = \"VA\";\nconst HONDURAS = \"HN\";\nconst HONG_KONG = \"HK\";\nconst HUNGARY = \"HU\";\nconst ICELAND = \"IS\";\nconst INDIA = \"IN\";\nconst INDONESIA = \"ID\";\nconst IRAN = \"IR\";\nconst IRAQ = \"IQ\";\nconst IRELAND = \"IE\";\nconst ISLE_OF_MAN = \"IM\";\nconst ISRAEL = \"IL\";\nconst ITALY = \"IT\";\nconst JAMAICA = \"JM\";\nconst JAPAN = \"JP\";\nconst JERSEY = \"JE\";\nconst JORDAN = \"JO\";\nconst KAZAKHSTAN = \"KZ\";\nconst KENYA = \"KE\";\nconst KIRIBATI = \"KI\";\nconst KOREA = \"KR\";\nconst KOSOVO = \"XK\";\nconst KUWAIT = \"KW\";\nconst KYRGYZSTAN = \"KG\";\nconst LAO_PEOPLE_DEMOCRATIC_REPUBLIC = \"LA\";\nconst LATVIA = \"LV\";\nconst LEBANON = \"LB\";\nconst LESOTHO = \"LS\";\nconst LIBERIA = \"LR\";\nconst LIBYA = \"LY\";\nconst LIECHTENSTEIN = \"LI\";\nconst LITHUANIA = \"LT\";\nconst LUXEMBOURG = \"LU\";\nconst MACAO = \"MO\";\nconst MADAGASCAR = \"MG\";\nconst MALAWI = \"MW\";\nconst MALAYSIA = \"MY\";\nconst MALDIVES = \"MV\";\nconst MALI = \"ML\";\nconst MALTA = \"MT\";\nconst MARSHALL_ISLANDS = \"MH\";\nconst MARTINIQUE = \"MQ\";\nconst MAURITANIA = \"MR\";\nconst MAURITIUS = \"MU\";\nconst MAYOTTE = \"YT\";\nconst MEXICO = \"MX\";\nconst MICRONESIA = \"FM\";\nconst MOLDOVA = \"MD\";\nconst MONACO = \"MC\";\nconst MONGOLIA = \"MN\";\nconst MONTENEGRO = \"ME\";\nconst MONTSERRAT = \"MS\";\nconst MOROCCO = \"MA\";\nconst MOZAMBIQUE = \"MZ\";\nconst MYANMAR = \"MM\";\nconst NAMIBIA = \"NA\";\nconst NAURU = \"NR\";\nconst NEPAL = \"NP\";\nconst NETHERLANDS = \"NL\";\nconst NEW_CALEDONIA = \"NC\";\nconst NEW_ZEALAND = \"NZ\";\nconst NICARAGUA = \"NI\";\nconst NIGER = \"NE\";\nconst NIGERIA = \"NG\";\nconst NIUE = \"NU\";\nconst NORFOLK_ISLAND = \"NF\";\nconst NORTHERN_MARIANA_ISLANDS = \"MP\";\nconst NORTH_MACEDONIA = \"MK\";\nconst NORWAY = \"NO\";\nconst OMAN = \"OM\";\nconst PAKISTAN = \"PK\";\nconst PALAU = \"PW\";\nconst PALESTINE = \"PS\";\nconst PANAMA = \"PA\";\nconst PAPUA_NEW_GUINEA = \"PG\";\nconst PARAGUAY = \"PY\";\nconst PERU = \"PE\";\nconst PHILIPPINES = \"PH\";\nconst PITCAIRN = \"PN\";\nconst POLAND = \"PL\";\nconst PORTUGAL = \"PT\";\nconst PUERTO_RICO = \"PR\";\nconst QATAR = \"QA\";\nconst ROMANIA = \"RO\";\nconst RUSSIAN_FEDERATION = \"RU\";\nconst RWANDA = \"RW\";\nconst REUNION = \"RE\";\nconst SAINT_BARTHELEMY = \"BL\";\nconst SAINT_HELENA = \"SH\";\nconst SAINT_KITTS_AND_NEVIS = \"KN\";\nconst SAINT_LUCIA = \"LC\";\nconst SAINT_MARTIN = \"MF\";\nconst SAINT_PIERRE_AND_MIQUELON = \"PM\";\nconst SAINT_VINCENT_AND_THE_GRENADINES = \"VC\";\nconst SAMOA = \"WS\";\nconst SAN_MARINO = \"SM\";\nconst SAO_TOME_AND_PRINCIPE = \"ST\";\nconst SAUDI_ARABIA = \"SA\";\nconst SENEGAL = \"SN\";\nconst SERBIA = \"RS\";\nconst SEYCHELLES = \"SC\";\nconst SIERRA_LEONE = \"SL\";\nconst SINGAPORE = \"SG\";\nconst SINT_MAARTEN = \"SX\";\nconst SLOVAKIA = \"SK\";\nconst SLOVENIA = \"SI\";\nconst SOLOMON_ISLANDS = \"SB\";\nconst SOMALIA = \"SO\";\nconst SOUTH_AFRICA = \"ZA\";\nconst SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS = \"GS\";\nconst SOUTH_SUDAN = \"SS\";\nconst SPAIN = \"ES\";\nconst SRI_LANKA = \"LK\";\nconst SUDAN = \"SD\";\nconst SURINAME = \"SR\";\nconst SVALBARD_AND_JAN_MAYEN = \"SJ\";\nconst SWEDEN = \"SE\";\nconst SWITZERLAND = \"CH\";\nconst SYRIAN_ARAB_REPUBLIC = \"SY\";\nconst TAIWAN = \"TW\";\nconst TAJIKISTAN = \"TJ\";\nconst TANZANIA = \"TZ\";\nconst THAILAND = \"TH\";\nconst TIMOR_LESTE = \"TL\";\nconst TOGO = \"TG\";\nconst TOKELAU = \"TK\";\nconst TONGA = \"TO\";\nconst TRINIDAD_AND_TOBAGO = \"TT\";\nconst TUNISIA = \"TN\";\nconst TURKEY = \"TR\";\nconst TURKMENISTAN = \"TM\";\nconst TURKS_AND_CAICOS_ISLANDS = \"TC\";\nconst TUVALU = \"TV\";\nconst UGANDA = \"UG\";\nconst UKRAINE = \"UA\";\nconst UNITED_ARAB_EMIRATES = \"AE\";\nconst UNITED_KINGDOM = \"GB\";\nconst UNITED_STATES_MINOR_OUTLYING_ISLANDS = \"UM\";\nconst UNITED_STATES_OF_AMERICA = \"US\";\nconst URUGUAY = \"UY\";\nconst UZBEKISTAN = \"UZ\";\nconst VANUATU = \"VU\";\nconst VENEZUELA = \"VE\";\nconst VIETNAM = \"VN\";\nconst WALLIS_AND_FUTUNA = \"WF\";\nconst WESTERN_SAHARA = \"EH\";\nconst YEMEN = \"YE\";\nconst ZAMBIA = \"ZM\";\nconst ZIMBABWE = \"ZW\";\n\nvar countries = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AFGHANISTAN: AFGHANISTAN,\n  ALAND_ISLANDS: ALAND_ISLANDS,\n  ALBANIA: ALBANIA,\n  ALGERIA: ALGERIA,\n  AMERICAN_SAMOA: AMERICAN_SAMOA,\n  AMERICAN_VIRGIN_ISLANDS: AMERICAN_VIRGIN_ISLANDS,\n  ANDORRA: ANDORRA,\n  ANGOLA: ANGOLA,\n  ANGUILLA: ANGUILLA,\n  ANTARCTICA: ANTARCTICA,\n  ANTIGUA_AND_BARBUDA: ANTIGUA_AND_BARBUDA,\n  ARGENTINA: ARGENTINA,\n  ARMENIA: ARMENIA,\n  ARUBA: ARUBA,\n  AUSTRALIA: AUSTRALIA,\n  AUSTRIA: AUSTRIA,\n  AZERBAIJAN: AZERBAIJAN,\n  BAHAMAS: BAHAMAS,\n  BAHRAIN: BAHRAIN,\n  BANGLADESH: BANGLADESH,\n  BARBADOS: BARBADOS,\n  BELARUS: BELARUS,\n  BELGIUM: BELGIUM,\n  BELIZE: BELIZE,\n  BENIN: BENIN,\n  BERMUDA: BERMUDA,\n  BHUTAN: BHUTAN,\n  BOLIVIA: BOLIVIA,\n  BOSNIA_AND_HERZEGOVINA: BOSNIA_AND_HERZEGOVINA,\n  BOTSWANA: BOTSWANA,\n  BOUVET_ISLAND: BOUVET_ISLAND,\n  BRAZIL: BRAZIL,\n  BRITISH_INDIAN_OCEAN_TERRITORY: BRITISH_INDIAN_OCEAN_TERRITORY,\n  BRITISH_VIRGIN_ISLANDS: BRITISH_VIRGIN_ISLANDS,\n  BRUNEI_DARUSSALAM: BRUNEI_DARUSSALAM,\n  BULGARIA: BULGARIA,\n  BURKINA_FASO: BURKINA_FASO,\n  BURUNDI: BURUNDI,\n  CABO_VERDE: CABO_VERDE,\n  CAMBODIA: CAMBODIA,\n  CAMEROON: CAMEROON,\n  CANADA: CANADA,\n  CAYMAN_ISLANDS: CAYMAN_ISLANDS,\n  CENTRAL_AFRICAN_REPUBLIC: CENTRAL_AFRICAN_REPUBLIC,\n  CHAD: CHAD,\n  CHILE: CHILE,\n  CHINA: CHINA,\n  CHRISTMAS_ISLAND: CHRISTMAS_ISLAND,\n  COCOS_ISLANDS: COCOS_ISLANDS,\n  COLOMBIA: COLOMBIA,\n  COMOROS: COMOROS,\n  CONGO_BRAZZAVILLE: CONGO_BRAZZAVILLE,\n  CONGO_KINSHASA: CONGO_KINSHASA,\n  COOK_ISLANDS: COOK_ISLANDS,\n  COSTA_RICA: COSTA_RICA,\n  CROATIA: CROATIA,\n  CUBA: CUBA,\n  CURACAO: CURACAO,\n  CYPRUS: CYPRUS,\n  CZECH_REPUBLIC: CZECH_REPUBLIC,\n  COTE_D_IVOIRE: COTE_D_IVOIRE,\n  DENMARK: DENMARK,\n  DJIBOUTI: DJIBOUTI,\n  DOMINICA: DOMINICA,\n  DOMINICAN_REPUBLIC: DOMINICAN_REPUBLIC,\n  DUTCH_ANTILLES: DUTCH_ANTILLES,\n  ECUADOR: ECUADOR,\n  EGYPT: EGYPT,\n  EL_SALVADOR: EL_SALVADOR,\n  EQUATORIAL_GUINEA: EQUATORIAL_GUINEA,\n  ERITREA: ERITREA,\n  ESTONIA: ESTONIA,\n  ESWATINI: ESWATINI,\n  ETHIOPIA: ETHIOPIA,\n  FALKLAND_ISLANDS: FALKLAND_ISLANDS,\n  FAROE_ISLANDS: FAROE_ISLANDS,\n  FIJI: FIJI,\n  FINLAND: FINLAND,\n  FRANCE: FRANCE,\n  FRENCH_GUIANA: FRENCH_GUIANA,\n  FRENCH_POLYNESIA: FRENCH_POLYNESIA,\n  FRENCH_SOUTHERN_TERRITORIES: FRENCH_SOUTHERN_TERRITORIES,\n  GABON: GABON,\n  GAMBIA: GAMBIA,\n  GEORGIA: GEORGIA,\n  GERMANY: GERMANY,\n  GHANA: GHANA,\n  GIBRALTAR: GIBRALTAR,\n  GREECE: GREECE,\n  GREENLAND: GREENLAND,\n  GRENADA: GRENADA,\n  GUADELOUPE: GUADELOUPE,\n  GUAM: GUAM,\n  GUATEMALA: GUATEMALA,\n  GUERNSEY: GUERNSEY,\n  GUINEA: GUINEA,\n  GUINEA_BISSAU: GUINEA_BISSAU,\n  GUYANA: GUYANA,\n  HAITI: HAITI,\n  HEARD_ISLAND_AND_MCDONALD_ISLANDS: HEARD_ISLAND_AND_MCDONALD_ISLANDS,\n  HOLY_SEE: HOLY_SEE,\n  HONDURAS: HONDURAS,\n  HONG_KONG: HONG_KONG,\n  HUNGARY: HUNGARY,\n  ICELAND: ICELAND,\n  INDIA: INDIA,\n  INDONESIA: INDONESIA,\n  IRAN: IRAN,\n  IRAQ: IRAQ,\n  IRELAND: IRELAND,\n  ISLE_OF_MAN: ISLE_OF_MAN,\n  ISRAEL: ISRAEL,\n  ITALY: ITALY,\n  JAMAICA: JAMAICA,\n  JAPAN: JAPAN,\n  JERSEY: JERSEY,\n  JORDAN: JORDAN,\n  KAZAKHSTAN: KAZAKHSTAN,\n  KENYA: KENYA,\n  KIRIBATI: KIRIBATI,\n  KOREA: KOREA,\n  KOSOVO: KOSOVO,\n  KUWAIT: KUWAIT,\n  KYRGYZSTAN: KYRGYZSTAN,\n  LAO_PEOPLE_DEMOCRATIC_REPUBLIC: LAO_PEOPLE_DEMOCRATIC_REPUBLIC,\n  LATVIA: LATVIA,\n  LEBANON: LEBANON,\n  LESOTHO: LESOTHO,\n  LIBERIA: LIBERIA,\n  LIBYA: LIBYA,\n  LIECHTENSTEIN: LIECHTENSTEIN,\n  LITHUANIA: LITHUANIA,\n  LUXEMBOURG: LUXEMBOURG,\n  MACAO: MACAO,\n  MADAGASCAR: MADAGASCAR,\n  MALAWI: MALAWI,\n  MALAYSIA: MALAYSIA,\n  MALDIVES: MALDIVES,\n  MALI: MALI,\n  MALTA: MALTA,\n  MARSHALL_ISLANDS: MARSHALL_ISLANDS,\n  MARTINIQUE: MARTINIQUE,\n  MAURITANIA: MAURITANIA,\n  MAURITIUS: MAURITIUS,\n  MAYOTTE: MAYOTTE,\n  MEXICO: MEXICO,\n  MICRONESIA: MICRONESIA,\n  MOLDOVA: MOLDOVA,\n  MONACO: MONACO,\n  MONGOLIA: MONGOLIA,\n  MONTENEGRO: MONTENEGRO,\n  MONTSERRAT: MONTSERRAT,\n  MOROCCO: MOROCCO,\n  MOZAMBIQUE: MOZAMBIQUE,\n  MYANMAR: MYANMAR,\n  NAMIBIA: NAMIBIA,\n  NAURU: NAURU,\n  NEPAL: NEPAL,\n  NETHERLANDS: NETHERLANDS,\n  NEW_CALEDONIA: NEW_CALEDONIA,\n  NEW_ZEALAND: NEW_ZEALAND,\n  NICARAGUA: NICARAGUA,\n  NIGER: NIGER,\n  NIGERIA: NIGERIA,\n  NIUE: NIUE,\n  NORFOLK_ISLAND: NORFOLK_ISLAND,\n  NORTHERN_MARIANA_ISLANDS: NORTHERN_MARIANA_ISLANDS,\n  NORTH_MACEDONIA: NORTH_MACEDONIA,\n  NORWAY: NORWAY,\n  OMAN: OMAN,\n  PAKISTAN: PAKISTAN,\n  PALAU: PALAU,\n  PALESTINE: PALESTINE,\n  PANAMA: PANAMA,\n  PAPUA_NEW_GUINEA: PAPUA_NEW_GUINEA,\n  PARAGUAY: PARAGUAY,\n  PERU: PERU,\n  PHILIPPINES: PHILIPPINES,\n  PITCAIRN: PITCAIRN,\n  POLAND: POLAND,\n  PORTUGAL: PORTUGAL,\n  PUERTO_RICO: PUERTO_RICO,\n  QATAR: QATAR,\n  ROMANIA: ROMANIA,\n  RUSSIAN_FEDERATION: RUSSIAN_FEDERATION,\n  RWANDA: RWANDA,\n  REUNION: REUNION,\n  SAINT_BARTHELEMY: SAINT_BARTHELEMY,\n  SAINT_HELENA: SAINT_HELENA,\n  SAINT_KITTS_AND_NEVIS: SAINT_KITTS_AND_NEVIS,\n  SAINT_LUCIA: SAINT_LUCIA,\n  SAINT_MARTIN: SAINT_MARTIN,\n  SAINT_PIERRE_AND_MIQUELON: SAINT_PIERRE_AND_MIQUELON,\n  SAINT_VINCENT_AND_THE_GRENADINES: SAINT_VINCENT_AND_THE_GRENADINES,\n  SAMOA: SAMOA,\n  SAN_MARINO: SAN_MARINO,\n  SAO_TOME_AND_PRINCIPE: SAO_TOME_AND_PRINCIPE,\n  SAUDI_ARABIA: SAUDI_ARABIA,\n  SENEGAL: SENEGAL,\n  SERBIA: SERBIA,\n  SEYCHELLES: SEYCHELLES,\n  SIERRA_LEONE: SIERRA_LEONE,\n  SINGAPORE: SINGAPORE,\n  SINT_MAARTEN: SINT_MAARTEN,\n  SLOVAKIA: SLOVAKIA,\n  SLOVENIA: SLOVENIA,\n  SOLOMON_ISLANDS: SOLOMON_ISLANDS,\n  SOMALIA: SOMALIA,\n  SOUTH_AFRICA: SOUTH_AFRICA,\n  SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS: SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS,\n  SOUTH_SUDAN: SOUTH_SUDAN,\n  SPAIN: SPAIN,\n  SRI_LANKA: SRI_LANKA,\n  SUDAN: SUDAN,\n  SURINAME: SURINAME,\n  SVALBARD_AND_JAN_MAYEN: SVALBARD_AND_JAN_MAYEN,\n  SWEDEN: SWEDEN,\n  SWITZERLAND: SWITZERLAND,\n  SYRIAN_ARAB_REPUBLIC: SYRIAN_ARAB_REPUBLIC,\n  TAIWAN: TAIWAN,\n  TAJIKISTAN: TAJIKISTAN,\n  TANZANIA: TANZANIA,\n  THAILAND: THAILAND,\n  TIMOR_LESTE: TIMOR_LESTE,\n  TOGO: TOGO,\n  TOKELAU: TOKELAU,\n  TONGA: TONGA,\n  TRINIDAD_AND_TOBAGO: TRINIDAD_AND_TOBAGO,\n  TUNISIA: TUNISIA,\n  TURKEY: TURKEY,\n  TURKMENISTAN: TURKMENISTAN,\n  TURKS_AND_CAICOS_ISLANDS: TURKS_AND_CAICOS_ISLANDS,\n  TUVALU: TUVALU,\n  UGANDA: UGANDA,\n  UKRAINE: UKRAINE,\n  UNITED_ARAB_EMIRATES: UNITED_ARAB_EMIRATES,\n  UNITED_KINGDOM: UNITED_KINGDOM,\n  UNITED_STATES_MINOR_OUTLYING_ISLANDS: UNITED_STATES_MINOR_OUTLYING_ISLANDS,\n  UNITED_STATES_OF_AMERICA: UNITED_STATES_OF_AMERICA,\n  URUGUAY: URUGUAY,\n  UZBEKISTAN: UZBEKISTAN,\n  VANUATU: VANUATU,\n  VENEZUELA: VENEZUELA,\n  VIETNAM: VIETNAM,\n  WALLIS_AND_FUTUNA: WALLIS_AND_FUTUNA,\n  WESTERN_SAHARA: WESTERN_SAHARA,\n  YEMEN: YEMEN,\n  ZAMBIA: ZAMBIA,\n  ZIMBABWE: ZIMBABWE\n});\n\nconst MORNING_ID = 1;\nconst MORNING_NAME = \"morning\";\nconst STANDARD_ID = 2;\nconst STANDARD_NAME = \"standard\";\nconst EVENING_ID = 3;\nconst EVENING_NAME = \"evening\";\nconst PICKUP_ID = 4;\nconst PICKUP_NAME = \"pickup\";\nconst MORNING = {\n  ID: MORNING_ID,\n  NAME: MORNING_NAME\n};\nconst STANDARD = {\n  ID: STANDARD_ID,\n  NAME: STANDARD_NAME\n};\nconst EVENING = {\n  ID: EVENING_ID,\n  NAME: EVENING_NAME\n};\nconst PICKUP = {\n  ID: PICKUP_ID,\n  NAME: PICKUP_NAME\n};\nconst ALL$2 = [MORNING, STANDARD, EVENING, PICKUP];\n\nvar deliveryTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MORNING_ID: MORNING_ID,\n  MORNING_NAME: MORNING_NAME,\n  STANDARD_ID: STANDARD_ID,\n  STANDARD_NAME: STANDARD_NAME,\n  EVENING_ID: EVENING_ID,\n  EVENING_NAME: EVENING_NAME,\n  PICKUP_ID: PICKUP_ID,\n  PICKUP_NAME: PICKUP_NAME,\n  MORNING: MORNING,\n  STANDARD: STANDARD,\n  EVENING: EVENING,\n  PICKUP: PICKUP,\n  ALL: ALL$2\n});\n\nconst PACKAGE_ID = 1;\nconst PACKAGE_NAME = \"package\";\nconst MAILBOX_ID = 2;\nconst MAILBOX_NAME = \"mailbox\";\nconst LETTER_ID = 3;\nconst LETTER_NAME = \"letter\";\nconst DIGITAL_STAMP_ID = 4;\nconst DIGITAL_STAMP_NAME = \"digital_stamp\";\nconst PACKAGE = {\n  ID: PACKAGE_ID,\n  NAME: PACKAGE_NAME\n};\nconst MAILBOX = {\n  ID: MAILBOX_ID,\n  NAME: MAILBOX_NAME\n};\nconst LETTER = {\n  ID: LETTER_ID,\n  NAME: LETTER_NAME\n};\nconst DIGITAL_STAMP = {\n  ID: DIGITAL_STAMP_ID,\n  NAME: DIGITAL_STAMP_NAME\n};\nconst ALL$1 = [PACKAGE, MAILBOX, LETTER, DIGITAL_STAMP];\n\nvar packageTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  PACKAGE_ID: PACKAGE_ID,\n  PACKAGE_NAME: PACKAGE_NAME,\n  MAILBOX_ID: MAILBOX_ID,\n  MAILBOX_NAME: MAILBOX_NAME,\n  LETTER_ID: LETTER_ID,\n  LETTER_NAME: LETTER_NAME,\n  DIGITAL_STAMP_ID: DIGITAL_STAMP_ID,\n  DIGITAL_STAMP_NAME: DIGITAL_STAMP_NAME,\n  PACKAGE: PACKAGE,\n  MAILBOX: MAILBOX,\n  LETTER: LETTER,\n  DIGITAL_STAMP: DIGITAL_STAMP,\n  ALL: ALL$1\n});\n\nconst MYPARCEL_ID = 1;\nconst MYPARCEL_NAME = \"myparcel\";\nconst MYPARCEL_HUMAN = \"MyParcel\";\nconst SENDMYPARCEL_ID = 2;\nconst SENDMYPARCEL_NAME = \"belgie\";\nconst SENDMYPARCEL_HUMAN = \"SendMyParcel\";\nconst FLESPAKKET_ID = 3;\nconst FLESPAKKET_NAME = \"flespakket\";\nconst FLESPAKKET_HUMAN = \"Flespakket\";\nconst MYPARCEL = {\n  ID: MYPARCEL_ID,\n  NAME: MYPARCEL_NAME,\n  HUMAN: MYPARCEL_HUMAN\n};\nconst SENDMYPARCEL = {\n  ID: SENDMYPARCEL_ID,\n  NAME: SENDMYPARCEL_NAME,\n  HUMAN: SENDMYPARCEL_HUMAN\n};\nconst FLESPAKKET = {\n  ID: FLESPAKKET_ID,\n  NAME: FLESPAKKET_NAME,\n  HUMAN: FLESPAKKET_HUMAN\n};\nconst ALL = [MYPARCEL, SENDMYPARCEL, FLESPAKKET];\n\nvar platforms = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MYPARCEL_ID: MYPARCEL_ID,\n  MYPARCEL_NAME: MYPARCEL_NAME,\n  MYPARCEL_HUMAN: MYPARCEL_HUMAN,\n  SENDMYPARCEL_ID: SENDMYPARCEL_ID,\n  SENDMYPARCEL_NAME: SENDMYPARCEL_NAME,\n  SENDMYPARCEL_HUMAN: SENDMYPARCEL_HUMAN,\n  FLESPAKKET_ID: FLESPAKKET_ID,\n  FLESPAKKET_NAME: FLESPAKKET_NAME,\n  FLESPAKKET_HUMAN: FLESPAKKET_HUMAN,\n  MYPARCEL: MYPARCEL,\n  SENDMYPARCEL: SENDMYPARCEL,\n  FLESPAKKET: FLESPAKKET,\n  ALL: ALL\n});\n\nvar PrivateGetEndpoints = /* @__PURE__ */ ((PrivateGetEndpoints2) => {\n  PrivateGetEndpoints2[\"GET_SHIPMENT\"] = \"getShipment\";\n  PrivateGetEndpoints2[\"GET_SHIPMENTS\"] = \"getShipments\";\n  return PrivateGetEndpoints2;\n})(PrivateGetEndpoints || {});\n\nvar PrivatePostEndpoints = /* @__PURE__ */ ((PrivatePostEndpoints2) => {\n  PrivatePostEndpoints2[\"POST_SHIPMENTS\"] = \"postShipments\";\n  return PrivatePostEndpoints2;\n})(PrivatePostEndpoints || {});\n\nclass GetShipment extends AbstractPrivateEndpoint {\n  method = \"GET\";\n  name = PrivateGetEndpoints.GET_SHIPMENT;\n  path = \"shipments/:id\";\n  property = \"shipments\";\n}\n\nclass GetShipments extends AbstractPrivateEndpoint {\n  method = \"GET\";\n  name = PrivateGetEndpoints.GET_SHIPMENTS;\n  path = \"shipments\";\n  property = \"shipments\";\n}\n\nclass PostShipments extends AbstractPrivateEndpoint {\n  method = \"POST\";\n  name = PrivatePostEndpoints.POST_SHIPMENTS;\n  path = \"shipments\";\n  property = \"ids\";\n}\n\nvar PublicGetEndpoints = /* @__PURE__ */ ((PublicGetEndpoints2) => {\n  PublicGetEndpoints2[\"GET_CARRIER\"] = \"getCarrier\";\n  PublicGetEndpoints2[\"GET_CARRIERS\"] = \"getCarriers\";\n  PublicGetEndpoints2[\"GET_DELIVERY_OPTIONS\"] = \"getDeliveryOptions\";\n  PublicGetEndpoints2[\"GET_PICKUP_LOCATIONS\"] = \"getPickupLocations\";\n  return PublicGetEndpoints2;\n})(PublicGetEndpoints || {});\n\nclass GetCarrier extends AbstractPublicEndpoint {\n  method = \"GET\";\n  name = PublicGetEndpoints.GET_CARRIER;\n  path = \"carriers/:carrier\";\n  property = \"carriers\";\n}\n\nclass GetCarriers extends AbstractPublicEndpoint {\n  method = \"GET\";\n  name = PublicGetEndpoints.GET_CARRIERS;\n  path = \"carriers\";\n  property = \"carriers\";\n}\n\nclass GetDeliveryOptions extends AbstractPublicEndpoint {\n  method = \"GET\";\n  name = PublicGetEndpoints.GET_DELIVERY_OPTIONS;\n  path = \"delivery_options\";\n  property = \"deliveries\";\n  getHeaders() {\n    return { ...super.getHeaders(), Accept: \"application/json;version=2.0\" };\n  }\n}\n\nclass GetPickupLocations extends AbstractPublicEndpoint {\n  method = \"GET\";\n  name = PublicGetEndpoints.GET_PICKUP_LOCATIONS;\n  path = \"pickup_locations\";\n  property = \"pickup_locations\";\n}\n\nexport { AbstractClient, AbstractEndpoint, AbstractPrivateEndpoint, AbstractPublicEndpoint, ApiException, BASE_URL, carriers as CARRIERS, countries as COUNTRIES, deliveryTypes as DELIVERY_TYPES, FetchClient, GetCarrier, GetCarriers, GetDeliveryOptions, GetPickupLocations, GetShipment, GetShipments, packageTypes as PACKAGE_TYPES, platforms as PLATFORMS, PostShipments, PrivateGetEndpoints, PrivatePostEndpoints, PublicGetEndpoints, UserException, createMyParcelSdk, createPrivateSdk, createPublicSdk };\n"],
  "mappings": "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EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAED,IAAM,aAAa;AACnB,IAAM,eAAe;AACrB,IAAM,cAAc;AACpB,IAAM,gBAAgB;AACtB,IAAM,aAAa;AACnB,IAAM,eAAe;AACrB,IAAM,YAAY;AAClB,IAAM,cAAc;AACpB,IAAM,UAAU;AAAA,EACd,IAAI;AAAA,EACJ,MAAM;AACR;AACA,IAAM,WAAW;AAAA,EACf,IAAI;AAAA,EACJ,MAAM;AACR;AACA,IAAM,UAAU;AAAA,EACd,IAAI;AAAA,EACJ,MAAM;AACR;AACA,IAAM,SAAS;AAAA,EACb,IAAI;AAAA,EACJ,MAAM;AACR;AACA,IAAM,QAAQ,CAAC,SAAS,UAAU,SAAS,MAAM;AAEjD,IAAI,gBAA6B,OAAO,OAAO;AAAA,EAC7C,WAAW;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,KAAK;AACP,CAAC;AAED,IAAM,aAAa;AACnB,IAAM,eAAe;AACrB,IAAM,aAAa;AACnB,IAAM,eAAe;AACrB,IAAM,YAAY;AAClB,IAAM,cAAc;AACpB,IAAM,mBAAmB;AACzB,IAAM,qBAAqB;AAC3B,IAAM,UAAU;AAAA,EACd,IAAI;AAAA,EACJ,MAAM;AACR;AACA,IAAM,UAAU;AAAA,EACd,IAAI;AAAA,EACJ,MAAM;AACR;AACA,IAAM,SAAS;AAAA,EACb,IAAI;AAAA,EACJ,MAAM;AACR;AACA,IAAM,gBAAgB;AAAA,EACpB,IAAI;AAAA,EACJ,MAAM;AACR;AACA,IAAM,QAAQ,CAAC,SAAS,SAAS,QAAQ,aAAa;AAEtD,IAAI,eAA4B,OAAO,OAAO;AAAA,EAC5C,WAAW;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,KAAK;AACP,CAAC;AAED,IAAM,cAAc;AACpB,IAAM,gBAAgB;AACtB,IAAM,iBAAiB;AACvB,IAAM,kBAAkB;AACxB,IAAM,oBAAoB;AAC1B,IAAM,qBAAqB;AAC3B,IAAM,gBAAgB;AACtB,IAAM,kBAAkB;AACxB,IAAM,mBAAmB;AACzB,IAAM,WAAW;AAAA,EACf,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,OAAO;AACT;AACA,IAAM,eAAe;AAAA,EACnB,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,OAAO;AACT;AACA,IAAM,aAAa;AAAA,EACjB,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,OAAO;AACT;AACA,IAAM,MAAM,CAAC,UAAU,cAAc,UAAU;AAE/C,IAAI,YAAyB,OAAO,OAAO;AAAA,EACzC,WAAW;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAED,IAAI,sBAAuC,EAAC,yBAAyB;AACnE,uBAAqB,kBAAkB;AACvC,uBAAqB,mBAAmB;AACxC,SAAO;AACT,GAAG,uBAAuB,CAAC,CAAC;AAE5B,IAAI,uBAAwC,EAAC,0BAA0B;AACrE,wBAAsB,oBAAoB;AAC1C,SAAO;AACT,GAAG,wBAAwB,CAAC,CAAC;AAE7B,gCAA0B,wBAAwB;AAAA,EAAlD;AAAA;AACE,kCAAS;AACT,gCAAO,oBAAoB;AAC3B,gCAAO;AACP,oCAAW;AAAA;AACb;AAEA,iCAA2B,wBAAwB;AAAA,EAAnD;AAAA;AACE,kCAAS;AACT,gCAAO,oBAAoB;AAC3B,gCAAO;AACP,oCAAW;AAAA;AACb;AAEA,kCAA4B,wBAAwB;AAAA,EAApD;AAAA;AACE,kCAAS;AACT,gCAAO,qBAAqB;AAC5B,gCAAO;AACP,oCAAW;AAAA;AACb;AAEA,IAAI,qBAAsC,EAAC,wBAAwB;AACjE,sBAAoB,iBAAiB;AACrC,sBAAoB,kBAAkB;AACtC,sBAAoB,0BAA0B;AAC9C,sBAAoB,0BAA0B;AAC9C,SAAO;AACT,GAAG,sBAAsB,CAAC,CAAC;AAE3B,+BAAyB,uBAAuB;AAAA,EAAhD;AAAA;AACE,kCAAS;AACT,gCAAO,mBAAmB;AAC1B,gCAAO;AACP,oCAAW;AAAA;AACb;AAEA,gCAA0B,uBAAuB;AAAA,EAAjD;AAAA;AACE,kCAAS;AACT,gCAAO,mBAAmB;AAC1B,gCAAO;AACP,oCAAW;AAAA;AACb;AAEA,uCAAiC,uBAAuB;AAAA,EAAxD;AAAA;AACE,kCAAS;AACT,gCAAO,mBAAmB;AAC1B,gCAAO;AACP,oCAAW;AAAA;AAAA,EACX,aAAa;AACX,WAAO,iCAAK,MAAM,WAAW,IAAtB,EAAyB,QAAQ,+BAA+B;AAAA,EACzE;AACF;AAEA,uCAAiC,uBAAuB;AAAA,EAAxD;AAAA;AACE,kCAAS;AACT,gCAAO,mBAAmB;AAC1B,gCAAO;AACP,oCAAW;AAAA;AACb;",
  "names": []
}
