var l=Object.defineProperty;var s=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var d=(e,t,r)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,p=(e,t)=>{for(var r in t||(t={}))u.call(t,r)&&d(e,r,t[r]);if(s)for(var r of s(t))c.call(t,r)&&d(e,r,t[r]);return e};import{t as i}from"./toArray.7df412a1.js";const V=(e,t,r)=>({name:e,options:t,propOptions:r}),f=(e,t)=>r=>i(r).filter(Boolean).every(n=>{const o=typeof n=="string"&&n in e;return o||console.warn(`Key "${r}" is missing in Tailwind prop validator "${t}". Add this key to avoid related css getting purged in production mode.`),o}),m=e=>{const{name:t,propOptions:r,options:a}=e;return{createVariantProp:()=>p({validator:f(a,t)},r),getVariantClasses:n=>n?i(n," ").map(o=>a.hasOwnProperty(o)?i(a[o]):[]).flat():[]}};export{V as d,m as u};
